# A 3x3 Conway's Game of Life
# Runs for eight iterations

step:
    # Sum the working board into r3
    add r0, r0, r1
    add r2, r2, r3
    add r0, r0, r2
    # Hack for 3-bit numbers
    const r2, 4
    eq r2, r2, r0
    if_zero r2, 1
    jmp 15
    # end hack
    add r5, r5, r6
    add r7, r7, r8
    add r5, r5, r7
    add r0, r0, r5

    # The rules of Conway's Game of Life
    # 1. Any live cell with fewer than two live neighbors dies.
    # 2. Any live cell with two or three live neighbors lives
    # 3. Any live cell with more than three live neighbors dies
    # 4. Any dead cell with exactly three live neighbors becomes a live cell.
    const r2, 2
    const r3, 3
    if_zero r4, 3
    eq r2, r0, r2
    if_zero r2, 1
    jmp 3
    sub r3, r0, r3
    if_zero r3, 1
    jmp 2
    const r0, 1
    jmp 1
    const r0, 0
    ret r0

step00:
    const r3,  0
    const r4,  0
    const r5,  0
    const r6,  0
    mov   r7, r0
    mov   r8, r1
    const r9,  0

    const r0, step
    call r0, 3, 11
    ret r3

step01:
    const r3,   0
    const r4,   0
    const r5,   0
    mov   r6,  r0
    mov   r7,  r1
    mov   r8,  r2
    mov   r9, r10
    mov  r10, r11
    mov  r11, r12

    const r0, step
    call r0, 3, 11
    ret r3

step02:
    const  r3,   0
    const  r4,   0
    const  r5,   0
    mov    r6,  r1
    mov    r7,  r2
    const  r8,   0
    mov    r9, r11
    mov   r10, r12
    const r11,   0

    const r0, step
    call r0, 3, 11
    ret r3

step10:
    const r3,   0
    mov   r4,  r0
    mov   r5,  r1
    const r6,   0
    mov   r7, r10
    mov   r8, r11
    const r9,   0
    mov  r10, r20
    mov  r11, r21

    const r0, step
    call r0, 3, 11
    ret r3

step11:
    mov  r3,  r0
    mov  r4,  r1
    mov  r5,  r2
    mov  r6, r10
    mov  r7, r11
    mov  r8, r12
    mov  r9, r20
    mov r10, r21
    mov r11, r22

    const r0, step
    call r0, 3, 11
    ret r3

step12:
    mov    r3,  r1
    mov    r4,  r2
    const  r5,   0
    mov    r6, r11
    mov    r7, r12
    const  r8,   0
    mov    r9, r21
    mov   r10, r22
    const r11,   0

    const r0, step
    call r0, 3, 11
    ret r3

step20:
    const  r3,   0
    mov    r4, r10
    mov    r5, r11
    const  r6,   0
    mov    r7, r20
    mov    r8, r21
    const  r9,   0
    const r10,   0
    const r11,   0

    const r0, step
    call r0, 3, 11
    ret r3

step21:
    mov    r3,  r10
    mov    r4,  r11
    mov    r5,  r12
    mov    r6,  r20
    mov    r7,  r21
    mov    r8,  r22
    const  r9,    0
    const r10,    0
    const r11,    0

    const r0, step
    call r0, 3, 11
    ret r3

step22:
    mov    r3,  r11
    mov    r4,  r12
    const  r5,    0
    mov    r6,  r21
    mov    r7,  r22
    const  r8,    0
    const  r9,    0
    const r10,    0
    const r11,    0

    const r0, step
    call r0, 3, 11
    ret r3

# Blinker is a period-2 oscillator
# in Conway's Game of Life:
#
# Even tick:
#    rx0 rx1 rx2
# r0x 0   1   0
# r1x 0   1   0
# r2x 0   1   0
#
# Odd tick:
#    rx0 rx1 rx2
# r0x 0   0   0
# r1x 1   1   1
# r2x 0   0   0
main:
    # A monotonic counter that tracks
    # the number of iterations taken
    int_sym r26, iter

    # Initialize the main board
    const r0,  0
    const r1,  1
    const r2,  0
    const r10, 0
    const r11, 1
    const r12, 0
    const r20, 0
    const r21, 1
    const r22, 0

    # Initialize remaining registers
    const r3,  0
    const r4,  0
    const r5,  0
    const r6,  0
    const r7,  0
    const r8,  0
    const r9,  0
    const r13, 0
    const r14, 0
    const r15, 0
    const r16, 0
    const r17, 0
    const r18, 0
    const r19, 0

    # calculate each position
    const r28, 0
    const r27, 0
    const r6, step00
    jmp 3
    const r28, 0
    const r27, 1
    const r6, step01
    jmp 3
    const r28, 0
    const r27, 2
    const r6, step02
    jmp 3
    const r28, 1
    const r27, 0
    const r6, step10
    jmp 3
    const r28, 1
    const r27, 1
    const r6, step11
    jmp 3
    const r28, 1
    const r27, 2
    const r6, step12
    jmp 3
    const r28, 2
    const r27, 0
    const r6, step20
    jmp 3
    const r28, 2
    const r27, 1
    const r6, step21
    jmp 3
    const r28, 2
    const r27, 2
    const r6, step22

    mov r99, r0
    call r6, 0, 22
    mov r3, r0
    mov r0, r99

    # update temporaries
    const r9, 1

    # current might be rx
    if_zero r28, 1
    jmp 11

    # current might be r0
    if_zero r27, 1
    jmp 2
    mov r16, r3
    jmp -42

    # current might be r1
    sub r27, r27, r9
    if_zero r27, 1
    jmp 2
    mov r17, r3
    jmp -43

    # current must be r2
    mov r18, r3
    jmp -41

    # current might be r1x
    sub r28, r28, r9
    if_zero r28, 1
    jmp 16

    # current might be r10
    if_zero r27, 1
    jmp 2
    mov r19, r3
    jmp -44

    # current might be r11
    sub r27, r27, r9
    if_zero r27, 1
    jmp 4
    mov r0,  r16
    mov r16, r19
    mov r19, r3
    jmp -47

    # current must be r12
    mov r1,  r17
    mov r17, r19
    mov r2,  r18
    mov r18, r3
    jmp -48

    # current must be r2x
    # current might be r20
    if_zero r27, 1
    jmp 2
    mov r19, r3
    jmp -48

    # current might be r21
    sub r27, r27, r9
    if_zero r27, 1
    jmp 4
    mov r10, r16
    mov r20, r19
    mov r19, r3
    jmp -51

    # current must be r22
    mov r11, r17
    mov r21, r19
    mov r12, r18
    mov r22, r3

    const r3, 1
    add r26, r26, r3
    const r3, 7
    eq r3, r3, r26
    if_zero r3, -92
    assert_zero r0
    ret r26
