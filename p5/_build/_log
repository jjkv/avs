### Starting build.
# Target: main.ml.depends, tags: { package(str), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules main.ml > main.ml.depends # cached
# Target: disassembler.ml.depends, tags: { package(str), extension:ml, file:disassembler.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules disassembler.ml > disassembler.ml.depends # cached
# Target: boolean.mli.depends, tags: { package(str), extension:mli, file:boolean.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules boolean.mli > boolean.mli.depends # cached
# Target: boolean.cmi, tags: { package(str), byte, compile, extension:mli, file:boolean.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o boolean.cmi boolean.mli # cached
# Target: bvec.mli.depends, tags: { package(str), extension:mli, file:bvec.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules bvec.mli > bvec.mli.depends # cached
# Target: bvec.cmi, tags: { package(str), byte, compile, extension:mli, file:bvec.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o bvec.cmi bvec.mli # cached
# Target: instr.ml.depends, tags: { package(str), extension:ml, file:instr.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules instr.ml > instr.ml.depends # cached
# Target: instr.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:instr.cmo, file:instr.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o instr.cmo instr.ml # cached
# Target: disassembler.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:disassembler.cmo, file:disassembler.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o disassembler.cmo disassembler.ml # cached
# Target: lexer.mll, tags: { package(str), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(str), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { package(str), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o lexer.cmo lexer.ml # cached
# Target: synthrube.ml.depends, tags: { package(str), extension:ml, file:synthrube.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules synthrube.ml > synthrube.ml.depends # cached
# Target: symrube.ml.depends, tags: { package(str), extension:ml, file:symrube.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules symrube.ml > symrube.ml.depends # cached
# Target: symrube.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:symrube.cmo, file:symrube.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o symrube.cmo symrube.ml
+ ocamlfind ocamlc -c -g -package str -o symrube.cmo symrube.ml
File "symrube.ml", line 16, characters 68-69:
Error: This expression has type
         [< `Failure of Boolean.bexpr
          | `Full of
              [< `L_Hole of int
               | `L_Id of string
               | `L_Int of int
               | `L_Str of string
               | `L_Sym of Boolean.bexpr list ] *
              Boolean.bexpr &
              [< `L_Hole of int
               | `L_Id of string
               | `L_Int of int
               | `L_Str of string
               | `L_Sym of Boolean.bexpr list ] *
              Boolean.bexpr
          | `Partial of Boolean.bexpr ]
         as 'a
       but an expression was expected of type 'a list
Command exited with code 2.
# Compilation unsuccessful.
