### Starting build.
# Target: main.ml.depends, tags: { package(str), extension:ml, file:main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules main.ml > main.ml.depends # cached
# Target: bvset.mli.depends, tags: { package(str), extension:mli, file:bvset.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules bvset.mli > bvset.mli.depends # cached
# Target: bvset.cmi, tags: { package(str), byte, compile, extension:mli, file:bvset.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o bvset.cmi bvset.mli # cached
# Target: dfa.ml.depends, tags: { package(str), extension:ml, file:dfa.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules dfa.ml > dfa.ml.depends # cached
# Target: disassembler.ml.depends, tags: { package(str), extension:ml, file:disassembler.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules disassembler.ml > disassembler.ml.depends # cached
# Target: instr.ml.depends, tags: { package(str), extension:ml, file:instr.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules instr.ml > instr.ml.depends # cached
# Target: instr.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:instr.cmo, file:instr.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o instr.cmo instr.ml # cached
# Target: disassembler.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:disassembler.cmo, file:disassembler.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o disassembler.cmo disassembler.ml # cached
# Target: dfa.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:dfa.cmo, file:dfa.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o dfa.cmo dfa.ml # cached
# Target: lexer.mll, tags: { package(str), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(str), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { package(str), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { package(str), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(str), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o main.cmo main.ml # cached
# Target: bvset.ml.depends, tags: { package(str), extension:ml, file:bvset.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules bvset.ml > bvset.ml.depends # cached
# Target: bvset.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:bvset.cmo, file:bvset.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o bvset.cmo bvset.ml # cached
# Target: parser.ml.depends, tags: { package(str), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package str -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { package(str), byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -g -package str -o parser.cmo parser.ml # cached
# Target: main.byte, tags: { package(str), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet }
ocamlfind ocamlc -g -linkpkg -package str bvset.cmo instr.cmo disassembler.cmo dfa.cmo parser.cmo lexer.cmo main.cmo -o main.byte # cached
# Compilation successful.
