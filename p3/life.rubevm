# A 3x3 Conway's Game of Life
# Runs for 1000 turns
#
# Blinker is a period-2 oscillator
# in Conway's Game of Life:
#
# Even tick:
#    rx0 rx1 rx2
# r0x 0   1   0
# r1x 0   1   0
# r2x 0   1   0
#
# Odd tick:
#    rx0 rx1 rx2
# r0x 0   0   0
# r1x 1   1   1
# r2x 0   0   0
#
# Initialize the counter
const r26, 0
#
# Initialize the main board
const r0,  0
const r1,  1
const r2,  0
const r10, 0
const r11, 1
const r12, 0
const r20, 0
const r21, 1
const r22, 0
#
# current is r0
const r27, 0
const r3,  0
const r4,  0
const r5,  0
const r13, 0
mov r14, r0
mov r15, r1
const r23, 0
mov r24, r10
mov r25, r11
#
jmp 10
# current is r1
const r27, 1
const r3,  0
const r4,  0
const r5,  0
mov r13, r0
mov r14, r1
mov r15, r2
mov r23, r10
mov r24, r11
mov r25, r12
#
jmp 10
# current is r2
const r27, 2
const r3,  0
const r4,  0
const r5,  0
mov r13, r1
mov r14, r2
const r15, 0
mov r23, r11
mov r24, r12
const r25, 0
#
jmp 10
# current is r10
const r27, 3
const r3,  0
mov r4,  r0
mov r5,  r1
const r13, 0
mov r14, r10
mov r15, r11
const r23, 0
mov r24, r20
mov r25, r21
#
jmp 10
# current is r11
const r27, 4
mov r3,  r0
mov r4,  r1
mov r5,  r2
mov r13, r10
mov r14, r11
mov r15, r12
mov r23, r20
mov r24, r21
mov r25, r22
#
jmp 10
# current is r12
const r27, 5
mov r3,  r1
mov r4,  r2
const r5,  0
mov r13, r11
mov r14, r12
const r15, 0
mov r23, r21
mov r24, r22
const r25, 0
#
jmp 10
# current is r20
const r27, 6
const r3,  0
mov r4,  r10
mov r5,  r11
const r13, 0
mov r14, r20
mov r15, r21
const r23, 0
const r24, 0
const r25, 0
#
jmp 10
# current is r21
const r27, 7
mov r3,  r10
mov r4,  r11
mov r5,  r12
mov r13, r20
mov r14, r21
mov r15, r22
const r23, 0
const r24, 0
const r25, 0
#
jmp 10
# current is r22
const r27, 8
mov r3,  r11
mov r4,  r12
const r5,  0
mov r13, r21
mov r14, r22
const r15, 0
const r23, 0
const r24, 0
const r25, 0
#
# Sum the working board into r3
add r6, r3,  r4
add r7, r5,  r13
add r8, r15, r23
add r9, r24, r25
add r3, r6,  r7
add r4, r8,  r9
add r3, r3,  r4
#
# The rules of Conway's Game of Life
# 1. Any live cell with fewer than two live neighbors dies.
# 2. Any live cell with two or three live neighbors lives
# 3. Any live cell with more than three live neighbors dies
# 4. Any dead cell with exactly three live neighbors becomes a live cell.
#
const r4, 2
const r5, 3
if_zero r14, 3
eq r4, r3, r4
if_zero r4, 1
jmp 3
sub r5, r3, r5
if_zero r5, 1
jmp 2
const r3, 1
jmp 1
const r3, 0
#
# update temporaries
const r9, 1
#
# current might be r0
if_zero r27, 1
jmp 2
mov r16, r3
jmp -111
#
# current might be r1
sub r27, r27, r9
if_zero r27, 1
jmp 2
mov r17, r3
jmp -105
#
# current might be r2
sub r27, r27, r9
if_zero r27, 1
jmp 2
mov r18, r3
jmp -99
#
# current might be r10
sub r27, r27, r9
if_zero r27, 1
jmp 2
mov r19, r3
jmp -93
#
# current might be r11
sub r27, r27, r9
if_zero r27, 1
jmp 4
mov r0,  r16
mov r16, r19
mov r19, r3
jmp -89
#
# current might be r12
sub r27, r27, r9
if_zero r27, 1
jmp 5
mov r1,  r17
mov r17, r19
mov r2,  r18
mov r18, r3
jmp -86
#
# current might be r20
sub r27, r27, r9
if_zero r27, 1
jmp 2
mov r19, r3
jmp -80
#
# current might be r21
sub r27, r27, r9
if_zero r27, 1
jmp 4
mov r10, r16
mov r20, r19
mov r19, r3
jmp -76
#
# current might be r22
mov r11, r17
mov r21, r19
mov r12, r18
mov r22, r3
#
const r3, 1
add r26, r26, r3
const r3, 1000
lt r3, r3, r26
if_zero r3, -173
